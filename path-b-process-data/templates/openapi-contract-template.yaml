# OpenAPI Data Contract Template

## What is OpenAPI?

OpenAPI (formerly Swagger) is a specification for describing REST APIs. It provides a standard way to document API endpoints, request/response schemas, and data validation rules. For systems analysts, OpenAPI serves as a contract between business requirements and technical implementation.

## Why Use OpenAPI for Data Contracts?

- **Clear Data Definitions:** Explicitly define every field, its type, constraints, and purpose
- **Validation Rules:** Specify exactly what constitutes valid data
- **Documentation:** Self-documenting APIs that stay current with implementation
- **Code Generation:** Automatically generate client libraries and server stubs
- **Testing:** Enable automated testing with precise expectations

## Basic OpenAPI Structure

```yaml
openapi: 3.0.3
info:
  title: Customer Onboarding API
  description: API for customer identity verification and account opening
  version: 1.0.0
  contact:
    name: Systems Analysis Team
    email: systems-analysis@example.com

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

paths:
  /customers:
    post:
      summary: Create new customer account
      description: Submit customer application for identity verification and account creation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerApplication'
      responses:
        '201':
          description: Application submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Schema definitions go here
```

## Data Types and Formats

### Basic Types
```yaml
# String with length constraints
customerName:
  type: string
  minLength: 2
  maxLength: 100
  description: Customer's legal full name

# Integer with range
age:
  type: integer
  minimum: 18
  maximum: 120
  description: Customer age in years

# Boolean
isUSResident:
  type: boolean
  description: Whether customer is a US resident

# Number with precision
annualIncome:
  type: number
  multipleOf: 0.01
  minimum: 0
  maximum: 10000000
  description: Customer's annual income in USD
```

### String Formats
```yaml
# Email validation
email:
  type: string
  format: email
  description: Customer's primary email address

# Date validation
dateOfBirth:
  type: string
  format: date
  description: Customer's date of birth (YYYY-MM-DD)

# Pattern validation (SSN)
socialSecurityNumber:
  type: string
  pattern: '^[0-9]{3}-[0-9]{2}-[0-9]{4}$'
  description: Social Security Number in format XXX-XX-XXXX

# Phone number
phoneNumber:
  type: string
  pattern: '^(\+1|1)?[-.\s]?(\([0-9]{3}\)|[0-9]{3})[-.\s]?[0-9]{3}[-.\s]?[0-9]{4}$'
  description: US phone number in various formats
```

### Enumerations
```yaml
accountType:
  type: string
  enum:
    - checking
    - savings
    - money_market
    - certificate_deposit
  description: Type of account being opened

customerType:
  type: string
  enum:
    - individual
    - joint
    - business
    - trust
  description: Category of customer account

idType:
  type: string
  enum:
    - drivers_license
    - state_id
    - passport
    - military_id
  description: Type of government-issued identification
```

### Arrays and Objects
```yaml
# Array of objects
previousAddresses:
  type: array
  maxItems: 3
  items:
    type: object
    properties:
      street:
        type: string
        maxLength: 100
      city:
        type: string
        maxLength: 50
      state:
        type: string
        pattern: '^[A-Z]{2}$'
      zipCode:
        type: string
        pattern: '^[0-9]{5}(-[0-9]{4})?$'
    required: [street, city, state, zipCode]

# Nested object
employmentInfo:
  type: object
  properties:
    employerName:
      type: string
      maxLength: 100
    jobTitle:
      type: string
      maxLength: 100
    employmentStatus:
      type: string
      enum: [employed, self_employed, unemployed, retired, student]
    startDate:
      type: string
      format: date
    annualIncome:
      type: number
      minimum: 0
      multipleOf: 0.01
  required: [employerName, employmentStatus, annualIncome]
```

## Complete Customer Application Example

```yaml
openapi: 3.0.3
info:
  title: Customer Onboarding API
  description: |
    API contract for customer identity verification and account opening process.
    Ensures compliance with BSA, PATRIOT Act, and FINRA requirements.
  version: 2.1.0
  
components:
  schemas:
    CustomerApplication:
      type: object
      description: Complete customer application for new account opening
      required:
        - personalInfo
        - contactInfo
        - identification
        - accountDetails
        - disclosures
      properties:
        personalInfo:
          $ref: '#/components/schemas/PersonalInformation'
        contactInfo:
          $ref: '#/components/schemas/ContactInformation'
        identification:
          $ref: '#/components/schemas/IdentificationDocument'
        accountDetails:
          $ref: '#/components/schemas/AccountDetails'
        employmentInfo:
          $ref: '#/components/schemas/EmploymentInformation'
        disclosures:
          $ref: '#/components/schemas/CustomerDisclosures'
        additionalInfo:
          type: string
          maxLength: 500
          description: Optional additional information or comments

    PersonalInformation:
      type: object
      required: [firstName, lastName, dateOfBirth, socialSecurityNumber, citizenship]
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[A-Za-z\s\-\.]+$'
          description: Customer's legal first name
          example: "Alice"
        middleName:
          type: string
          maxLength: 50
          pattern: '^[A-Za-z\s\-\.]*$'
          description: Customer's middle name or initial
          example: "Marie"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[A-Za-z\s\-\.]+$'
          description: Customer's legal last name
          example: "Anderson"
        dateOfBirth:
          type: string
          format: date
          description: Customer's date of birth (must be 18+ years old)
          example: "1985-03-15"
        socialSecurityNumber:
          type: string
          pattern: '^[0-9]{3}-[0-9]{2}-[0-9]{4}$'
          description: Social Security Number in XXX-XX-XXXX format
          example: "123-45-6789"
        citizenship:
          type: string
          enum: [us_citizen, permanent_resident, visa_holder]
          description: Customer's citizenship/residency status
          example: "us_citizen"

    ContactInformation:
      type: object
      required: [primaryAddress, phoneNumber, emailAddress]
      properties:
        primaryAddress:
          $ref: '#/components/schemas/Address'
        mailingAddress:
          $ref: '#/components/schemas/Address'
        phoneNumber:
          type: string
          pattern: '^(\+1|1)?[-.\s]?(\([0-9]{3}\)|[0-9]{3})[-.\s]?[0-9]{3}[-.\s]?[0-9]{4}$'
          description: Primary phone number
          example: "(555) 123-4567"
        alternatePhoneNumber:
          type: string
          pattern: '^(\+1|1)?[-.\s]?(\([0-9]{3}\)|[0-9]{3})[-.\s]?[0-9]{3}[-.\s]?[0-9]{4}$'
          description: Alternate phone number (optional)
        emailAddress:
          type: string
          format: email
          maxLength: 100
          description: Primary email address
          example: "alice.anderson@example.com"

    Address:
      type: object
      required: [street, city, state, zipCode]
      properties:
        street:
          type: string
          minLength: 5
          maxLength: 100
          description: Street address including number and name
          example: "123 Main Street, Apt 4B"
        city:
          type: string
          minLength: 2
          maxLength: 50
          description: City name
          example: "Dallas"
        state:
          type: string
          pattern: '^[A-Z]{2}$'
          description: Two-letter state code
          example: "TX"
        zipCode:
          type: string
          pattern: '^[0-9]{5}(-[0-9]{4})?$'
          description: 5 or 9 digit ZIP code
          example: "75201"
        country:
          type: string
          enum: [US]
          default: US
          description: Country code (currently US only)

    IdentificationDocument:
      type: object
      required: [documentType, documentNumber, issueDate, expirationDate]
      properties:
        documentType:
          type: string
          enum: [drivers_license, state_id, passport, military_id]
          description: Type of government-issued ID
          example: "drivers_license"
        documentNumber:
          type: string
          minLength: 5
          maxLength: 20
          description: ID document number
          example: "D123456789"
        issueDate:
          type: string
          format: date
          description: Date ID was issued
          example: "2020-03-15"
        expirationDate:
          type: string
          format: date
          description: Date ID expires (must be future date)
          example: "2025-03-15"
        issuingState:
          type: string
          pattern: '^[A-Z]{2}$'
          description: State that issued the ID
          example: "TX"

    AccountDetails:
      type: object
      required: [accountType, initialDeposit, fundingSource]
      properties:
        accountType:
          type: string
          enum: [checking, savings, money_market, certificate_deposit]
          description: Type of account to open
          example: "checking"
        initialDeposit:
          type: number
          multipleOf: 0.01
          minimum: 25.00
          maximum: 10000.00
          description: Initial deposit amount in USD
          example: 500.00
        fundingSource:
          type: string
          enum: [external_bank, check, cash, wire_transfer]
          description: How initial deposit will be funded
          example: "external_bank"
        accountPurpose:
          type: string
          maxLength: 200
          description: Intended use of the account
          example: "Personal banking and bill payments"

    EmploymentInformation:
      type: object
      properties:
        employmentStatus:
          type: string
          enum: [employed, self_employed, unemployed, retired, student]
          description: Current employment status
          example: "employed"
        employerName:
          type: string
          maxLength: 100
          description: Name of current employer
          example: "ABC Corporation"
        jobTitle:
          type: string
          maxLength: 100
          description: Current job title
          example: "Software Engineer"
        workPhoneNumber:
          type: string
          pattern: '^(\+1|1)?[-.\s]?(\([0-9]{3}\)|[0-9]{3})[-.\s]?[0-9]{3}[-.\s]?[0-9]{4}$'
          description: Work phone number
        annualIncome:
          type: number
          multipleOf: 0.01
          minimum: 0
          maximum: 10000000
          description: Annual gross income in USD
          example: 75000.00
        employmentStartDate:
          type: string
          format: date
          description: Start date with current employer
          example: "2022-01-15"

    CustomerDisclosures:
      type: object
      required: [patriotActConsent, privacyPolicyConsent, termsOfServiceConsent]
      properties:
        patriotActConsent:
          type: boolean
          description: Customer consents to PATRIOT Act verification
          example: true
        privacyPolicyConsent:
          type: boolean
          description: Customer accepts privacy policy
          example: true
        termsOfServiceConsent:
          type: boolean
          description: Customer accepts terms of service
          example: true
        marketingOptIn:
          type: boolean
          description: Customer opts in to marketing communications
          example: false

    ApplicationResponse:
      type: object
      properties:
        applicationId:
          type: string
          pattern: '^APP-[0-9]{8}$'
          description: Unique application identifier
          example: "APP-12345678"
        status:
          type: string
          enum: [submitted, under_review, approved, rejected, more_info_needed]
          description: Current application status
          example: "under_review"
        submissionTimestamp:
          type: string
          format: date-time
          description: When application was submitted
          example: "2024-03-15T14:30:00Z"
        estimatedDecisionTime:
          type: string
          description: Expected decision timeframe
          example: "Within 24 hours"

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: Machine-readable error code
          example: "VALIDATION_FAILED"
        message:
          type: string
          description: Human-readable error message
          example: "One or more required fields are missing or invalid"
        fieldErrors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field name that caused the error
                example: "personalInfo.socialSecurityNumber"
              message:
                type: string
                description: Specific error for this field
                example: "Must be in format XXX-XX-XXXX"
```

## Validation Rules Commentary

This example demonstrates comprehensive validation including:

- **Format Validation:** SSN patterns, phone number formats, email validation
- **Business Rules:** Minimum age (18+), deposit limits, expiration date checks
- **Compliance Fields:** Required disclosures for regulatory compliance
- **Data Quality:** Length limits, character restrictions, enumerated values
- **Usability:** Clear examples and descriptions for each field

## Using This Template with Copilot

1. **Start with Business Requirements:** Provide policy text and ask Copilot to identify data elements
2. **Request Validation Rules:** Ask for appropriate constraints based on business rules
3. **Add Examples:** Request realistic sample data for each field
4. **Include Compliance:** Specify regulatory requirements that affect data collection
5. **Iterate and Refine:** Use Copilot to add missing fields or improve validation